version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: testuser
      POSTGRES_PASSWORD: testpass
      POSTGRES_DB: testdb
    ports:
      - "5432:5432"
    volumes:
      - ./init/postgres:/docker-entrypoint-initdb.d
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U testuser -d testdb"]
      interval: 5s
      timeout: 5s
      retries: 5

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.7.1
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - ./init/elasticsearch:/usr/share/elasticsearch/init
      - esdata:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      
  # --- Added Kibana Service ---
  kibana:
    image: docker.elastic.co/kibana/kibana:8.7.1 # Use the same version as Elasticsearch
    ports:
      - "5601:5601" # Default Kibana port
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200 # Connect to ES using service name
    depends_on:
      elasticsearch:
        condition: service_healthy # Wait for Elasticsearch to be ready
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5601/api/status"]
      interval: 10s
      timeout: 10s
      retries: 5
      
  rust-app:
    build:
      context: . # Use the current directory as the build context
      # dockerfile: /workspace/rs-benchmark/Dockerfile # Specify the Dockerfile location
    environment:
      # Example environment variables - adjust names and values as needed by your app
      DATABASE_URL: postgres://testuser:testpass@postgres:5432/testdb
      ELASTICSEARCH_URL: http://elasticsearch:9200
      DATA_COUNT: 1000000
      RUST_LOG: debug # Optional: Set log level
    ports:
      - 4444:4444
    depends_on:
      postgres:
        condition: service_healthy # Wait for postgres to be ready
      elasticsearch: # Corrected indentation
        condition: service_healthy # Wait for elasticsearch to be ready
    # command: ["sh", "-c", "sleep 30 && ./rs-benchmark"] # Add sleep before starting
    command: ["sh", "-c", "sleep 30 && ./rs-benchmark && ./rs_benchmark_api"] # Add sleep before starting

    
  # cadvisor:
  #   image: gcr.io/cadvisor/cadvisor:v0.49.1
  #   restart: unless-stopped
  #   privileged: true
  #   expose:
  #     - 8080
  #   command:
  #     - '-housekeeping_interval=15s'
  #     - '-docker_only=true'
  #     - '-store_container_labels=false'
  #   devices:
  #     - /dev/kmsg
  #   volumes:
  #     - /:/rootfs:ro
  #     - /var/run:/var/run:rw
  #     - /sys:/sys:ro
  #     - /var/lib/docker/:/var/lib/docker:ro
  #     - /dev/disk/:/dev/disk:ro
  #     - /etc/machine-id:/etc/machine-id:ro
      
  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    user: "nobody"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=1y'
      # - '--web.external-url=/prometheus/'
      # - '--web.route-prefix=/prometheus/'
      # /!\ Uncomment the following line to set a size limit for the Prometheus database /!\
#      - '--storage.tsdb.retention.size=10GB'
    expose:
      - 9090
    volumes:
      # /!\ To be modified depending on your needs /!\
      - ./prometheus/data:/prometheus
      - ./prometheus:/etc/prometheus/
  #   depends_on:
  #     - cadvisor
  #     - node-exporter
  #   links:
  #     - cadvisor:cadvisor
  #     - node-exporter:node-exporter

  # node-exporter:
  #   image: prom/node-exporter:latest
  #   restart: unless-stopped
  #   expose:
  #     - 9100
  #   command:
  #     - --path.procfs=/host/proc
  #     - --path.sysfs=/host/sys
  #     - --path.rootfs=/host
  #     - --collector.filesystem.ignored-mount-points
  #     - ^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)
  #   volumes:
  #     - /proc:/host/proc:ro
  #     - /sys:/host/sys:ro
  #     - /:/rootfs:ro
  #     - /:/host:ro,rslave

      
  alertmanager:
    image: prom/alertmanager
    ports:
      - 9093:9093
    volumes:
      - ./alertmanager/:/etc/alertmanager/
    restart: always
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'


  grafana:
    image: grafana/grafana:latest
    restart: unless-stopped
    user: "472"
    ports:
      - "3000:3000"
    env_file:
      - ./grafana/.env
    volumes:
      # /!\ To be modified depending on your needs /!\
      - ./grafana/data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
      
  influxdb:
    image: influxdb:1.8
    ports:
      - "8086:8086"
    environment:
      - INFLUXDB_DB=k6


volumes:
  pgdata:
  esdata: