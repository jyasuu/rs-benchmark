version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: testuser
      POSTGRES_PASSWORD: testpass
      POSTGRES_DB: testdb
    ports:
      - "5432:5432"
    volumes:
      - ./init/postgres:/docker-entrypoint-initdb.d
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U testuser -d testdb"]
      interval: 5s
      timeout: 5s
      retries: 5

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.7.1
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - ./init/elasticsearch:/usr/share/elasticsearch/init
      - esdata:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      
  # --- Added Kibana Service ---
  kibana:
    image: docker.elastic.co/kibana/kibana:8.7.1 # Use the same version as Elasticsearch
    ports:
      - "5601:5601" # Default Kibana port
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200 # Connect to ES using service name
    depends_on:
      elasticsearch:
        condition: service_healthy # Wait for Elasticsearch to be ready
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5601/api/status"]
      interval: 10s
      timeout: 10s
      retries: 5
      
  rust-app:
    build:
      context: . # Use the current directory as the build context
      # dockerfile: /workspace/rs-benchmark/Dockerfile # Specify the Dockerfile location
    environment:
      # Example environment variables - adjust names and values as needed by your app
      DATABASE_URL: postgres://testuser:testpass@postgres:5432/testdb
      ELASTICSEARCH_URL: http://elasticsearch:9200
      DATA_COUNT: 10000
      RUST_LOG: info # Optional: Set log level
    depends_on:
      postgres:
        condition: service_healthy # Wait for postgres to be ready
      elasticsearch: # Corrected indentation
        condition: service_healthy # Wait for elasticsearch to be ready
    command: ["sh", "-c", "sleep 30 && ./rs-benchmark"] # Add sleep before starting

volumes:
  pgdata:
  esdata: